name: Meine super duper Pipeline

on:
    push:
        branches:
        - main
    pull_request:
        branches:
        - main
jobs:
  tests:
      name: Tests
      runs-on: ubuntu-latest
      steps:
          - name: Checkout
            uses: actions/checkout@v4

          - name: Install go
            uses: actions/setup-go@v5
            with:
                go-version: ${{ env.GO_VERSION }}
              
          - name: Install node
            uses: actions/setup-node@v3
            with:
                node-version: ${{ env.NODE_VERSION }}

          - name: Build frontend
            working-directory: ./frontend
            run: npm ci && npx ng build && cp -r dist/frontend/browser ../backend/cmd/strichliste/frontendDist

          - name: Run tests
            working-directory: ./backend
            run: go test ./...
  
  codeformatting:
      name: Formatting
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v4
        - name: Install go
          uses: actions/setup-go@v5
          with:
            go-version: ${{ env.GO_VERSION }}
        - name: Run gofmt
          run: files=$(gofmt -l ./backend) && [ -z "$files" ]

  codecoverage:
      name: Code Coverage
      if: github.actor != 'dependabot[bot]'
      needs: codeformatting
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v4
        - name: Install go
          uses: actions/setup-go@v5
          with:
            go-version: ${{ env.GO_VERSION }}
        - name: Install node
          uses: actions/setup-node@v3
          with:
            node-version: ${{ env.NODE_VERSION }}
        - name: Build frontend
          working-directory: ./frontend
          run: npm ci && npx ng build && cp -r dist/frontend/browser ../backend/cmd/strichliste/frontendDist
        - name: create coverage report
          working-directory: ./backend
          run: go test ./... -coverprofile=coverage.out && go tool cover -html=coverage.out -o ../coverage.html
        - name: Copy files via SCP action
          uses: appleboy/scp-action@master
          with:
            host: dhbw.hoenle.xyz
            username: group2
            key: ${{ secrets.PRIVATE_SSH }}
            source: "./coverage.html"
            target: "/var/www/group2/"
  
  smoke:
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Build
        uses: docker/build-push-action@v5
        with:
            context: .
            push: false
            load: true
            tags: |
              ghcr.io/florianpall/template:latest
              ghcr.io/florianpall/template:${{ github.sha }}

      - name: Smoke weed everyday
        run: |
          docker run -d -p 8080:8080 --name test-container ghcr.io/florianpall/template:latest
          
          # Warten bis der Container bereit ist
          sleep 10
          
          # Smoke Tests ausf√ºhren
          cd backend
          go run ./cmd/smoketest/
          
          # Container stoppen
          docker stop test-container

  container:
    runs-on: ubuntu-latest
    needs: smoke

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
            context: .
            push: ${{ github.ref_name == 'main' }}
            tags: |
                ghcr.io/florianpall/templatezwei:latest
                ghcr.io/florianpall/templatezwei:${{ github.sha }}
  deploy:
    runs-on: ubuntu-latest
    needs: [container]
    
    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Login bei GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Neues Image pullen
            docker pull ghcr.io/florianpall/templatezwei:latest
            
            # Alten Container stoppen und entfernen
            docker stop template-app || true
            docker rm template-app || true
            
            # Neuen Container starten
            docker run -d \
              --name template-app \
              --restart always \
              -p 2222:8080 \
              ghcr.io/florianpall/templatezwei:latest